# 스트림 
여러 데이터가 존재할 때 각 데이터를 순차적으로 처리할 수 있게끔 도와주는 기능   

1. 스트림은 데이터 소스를 변경하지 않는다. (기존 메모리는 변경시키지 않고 새롭게 메모리를 할당해서 반환한다.)      
2. 스트림은 일회용이다. (한번 사용하면 닫혀서 다시 사용할 수 없다.)        
3. 스트림은 작업을 내부 반복저긍로 처리한다.(반복문을 메서드의 내부에 숨길 수 있다.)    
4. 스트림의 연산 (다수의 중간 연산과 1개의 최종 연산으로 값을 도출한다.)   
    
**중간 연산**   
|중간 연산|설명|
|----------|----------|
|distinct()|중복을 제거(중복 기준은?)|
|filter(Predicate<?>)|조건에 안 맞는 요소 제외(반환값 boolean)|
|limit(long)|스트림의 일부를 제거|
|skip(long)|일부를 건너뜀|
|peek(Consumer<?>)|스트림의 요소에 작업 수행(반환값 x)|
|sorted()|스트림의 요소를 정렬|
|sorted(Comparator<?>)|스트림의 요소를 정렬|
|map(Function<T,R>)|스트림의 요소를 변환한다. -> 여러 자료형의 map 존재|
     
**최종 연산**   
|최종 연산|설명|
|----------|----------|
|forEach(Consumer<?>)|각 요소에 지정된 작업 수행(반환값 x)|
|count()|스트림 요소 개수 반환|
|max()/min()|스트림의 최대값/최소값을 반환|
|findAny()|아무거나 하나|
|findFirst()|첫번째 요소|
|allMatch(Predicate<?>)|주어진 조건을 모든 요소가 만족하는지|
|anyMatch(Predicate<?>)|주어진 조건이 하나라도 맞는지|
|noneMatch(Predicate<?>)|주어진 조건을 모든 요소가 만족하지 않는지|
|toArray|스트림의 모든 요소를 배열로 반환|
|reduce(BinaryOperator<T>)|스트림의 요소를 하나씩 줄여가면서 리듀싱 계산한다|    
|collect(Collector<T,A,R>)|스트림의 요소를 수집한다. 요소를 그룹화하거나 분할한 결과를 컬렉션에 담아 분환하는데 사용된다.|   
       
필자 같은 경우는 ```sorted(), filter(), map(), collect()```를 주로 사용하고       
```collect()```는 ```collect(Collectors.toList())``` 를 사용하여 리스트로 반환시킨다.     
  
위 중간 연산 메서드들은 ```Stream<?>``` 객체를 리턴하기에 연속으로 체이닝해서 사용이 가능하다.     
