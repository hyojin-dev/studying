// 프록시패턴
// 장점
// GameService의 기존 코드를 변경하지 않고 부가적인 기능(기능 추가 등)은 Proxy에서 처리한다.

// 단점
// 비교적 코드가 복잡해진다

interface DefaultGameService {
    void startGame();
}

class GameService implements DefaultGameService {
    public void startGame() {
        System.out.println("main logic");
    }
}

class GameServiceProxy implements DefaultGameService {

    private DefaultGameService gameService;

    public GameServiceProxy(DefaultGameService gameService) {
        this.gameService = gameService;
    }

    public void startGame() {
        long before = System.currentTimeMillis();
        gameService.startGame();
        System.out.println(System.currentTimeMillis() - before);
    }
}

class Client {
    public static void main(String[] args) {
        DefaultGameService gameService = new GameServiceProxy(new GameService());
        gameService.startGame();
    }
}
